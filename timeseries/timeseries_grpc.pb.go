// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: timeseries/timeseries.proto

package timeseries

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TimeseriesService_Write_FullMethodName     = "/infinimesh.timeseries.TimeseriesService/Write"
	TimeseriesService_WriteBulk_FullMethodName = "/infinimesh.timeseries.TimeseriesService/WriteBulk"
	TimeseriesService_Read_FullMethodName      = "/infinimesh.timeseries.TimeseriesService/Read"
	TimeseriesService_Stat_FullMethodName      = "/infinimesh.timeseries.TimeseriesService/Stat"
	TimeseriesService_Flush_FullMethodName     = "/infinimesh.timeseries.TimeseriesService/Flush"
)

// TimeseriesServiceClient is the client API for TimeseriesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimeseriesServiceClient interface {
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	WriteBulk(ctx context.Context, in *WriteBulkRequest, opts ...grpc.CallOption) (*WriteBulkResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error)
	Flush(ctx context.Context, in *FlushRequest, opts ...grpc.CallOption) (*FlushResponse, error)
}

type timeseriesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeseriesServiceClient(cc grpc.ClientConnInterface) TimeseriesServiceClient {
	return &timeseriesServiceClient{cc}
}

func (c *timeseriesServiceClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, TimeseriesService_Write_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeseriesServiceClient) WriteBulk(ctx context.Context, in *WriteBulkRequest, opts ...grpc.CallOption) (*WriteBulkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteBulkResponse)
	err := c.cc.Invoke(ctx, TimeseriesService_WriteBulk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeseriesServiceClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, TimeseriesService_Read_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeseriesServiceClient) Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatResponse)
	err := c.cc.Invoke(ctx, TimeseriesService_Stat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeseriesServiceClient) Flush(ctx context.Context, in *FlushRequest, opts ...grpc.CallOption) (*FlushResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FlushResponse)
	err := c.cc.Invoke(ctx, TimeseriesService_Flush_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeseriesServiceServer is the server API for TimeseriesService service.
// All implementations must embed UnimplementedTimeseriesServiceServer
// for forward compatibility.
type TimeseriesServiceServer interface {
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	WriteBulk(context.Context, *WriteBulkRequest) (*WriteBulkResponse, error)
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	Stat(context.Context, *StatRequest) (*StatResponse, error)
	Flush(context.Context, *FlushRequest) (*FlushResponse, error)
	mustEmbedUnimplementedTimeseriesServiceServer()
}

// UnimplementedTimeseriesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTimeseriesServiceServer struct{}

func (UnimplementedTimeseriesServiceServer) Write(context.Context, *WriteRequest) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedTimeseriesServiceServer) WriteBulk(context.Context, *WriteBulkRequest) (*WriteBulkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteBulk not implemented")
}
func (UnimplementedTimeseriesServiceServer) Read(context.Context, *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedTimeseriesServiceServer) Stat(context.Context, *StatRequest) (*StatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedTimeseriesServiceServer) Flush(context.Context, *FlushRequest) (*FlushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flush not implemented")
}
func (UnimplementedTimeseriesServiceServer) mustEmbedUnimplementedTimeseriesServiceServer() {}
func (UnimplementedTimeseriesServiceServer) testEmbeddedByValue()                           {}

// UnsafeTimeseriesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimeseriesServiceServer will
// result in compilation errors.
type UnsafeTimeseriesServiceServer interface {
	mustEmbedUnimplementedTimeseriesServiceServer()
}

func RegisterTimeseriesServiceServer(s grpc.ServiceRegistrar, srv TimeseriesServiceServer) {
	// If the following call pancis, it indicates UnimplementedTimeseriesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TimeseriesService_ServiceDesc, srv)
}

func _TimeseriesService_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeseriesServiceServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeseriesService_Write_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeseriesServiceServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeseriesService_WriteBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteBulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeseriesServiceServer).WriteBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeseriesService_WriteBulk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeseriesServiceServer).WriteBulk(ctx, req.(*WriteBulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeseriesService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeseriesServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeseriesService_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeseriesServiceServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeseriesService_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeseriesServiceServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeseriesService_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeseriesServiceServer).Stat(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeseriesService_Flush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeseriesServiceServer).Flush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeseriesService_Flush_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeseriesServiceServer).Flush(ctx, req.(*FlushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TimeseriesService_ServiceDesc is the grpc.ServiceDesc for TimeseriesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimeseriesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infinimesh.timeseries.TimeseriesService",
	HandlerType: (*TimeseriesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _TimeseriesService_Write_Handler,
		},
		{
			MethodName: "WriteBulk",
			Handler:    _TimeseriesService_WriteBulk_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _TimeseriesService_Read_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _TimeseriesService_Stat_Handler,
		},
		{
			MethodName: "Flush",
			Handler:    _TimeseriesService_Flush_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "timeseries/timeseries.proto",
}
